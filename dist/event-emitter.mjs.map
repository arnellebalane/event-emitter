{"version":3,"file":"event-emitter.mjs","sources":["../event-emitter.js"],"sourcesContent":["// @flow\n\nexport default class EventEmitter {\n    $listeners: Object\n\n    constructor() {\n        this.$listeners = {};\n    }\n\n    on(name: string, callback: Function): void {\n        if (!this.$listeners[name]) {\n            this.$listeners[name] = [];\n        }\n        this.$listeners[name].push(callback);\n    }\n\n    off(name: string, callback?: Function): void {\n        if (!this.$listeners[name]) {\n            return;\n        }\n        if (callback instanceof Function) {\n            const index = this.$listeners[name].indexOf(callback);\n            this.$listeners[name].splice(index, 1);\n        }\n        if (!this.$listeners[name].length || !callback) {\n            delete this.$listeners[name];\n        }\n    }\n\n    emit(name: string, data?: mixed): void {\n        if (!this.$listeners[name]) {\n            return;\n        }\n        const hasData = arguments.length > 1;\n        this.$listeners[name].forEach(callback => (hasData ? callback(data) : callback()));\n    }\n}\n"],"names":["this"],"mappings":"wXA6BqBA"}